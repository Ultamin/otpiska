import os
import re
import logging
import aiosqlite
import asyncio
import requests
from logging.handlers import RotatingFileHandler
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    CallbackContext, CallbackQueryHandler,
    ConversationHandler, PreCheckoutQueryHandler
)
from telegram.error import BadRequest, Conflict
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_TOKEN = os.getenv("PAYMENT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([TOKEN, PAYMENT_TOKEN, DEEPSEEK_API_KEY]):
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        RotatingFileHandler('unsub_bot.log', maxBytes=5*1024*1024, backupCount=3),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_PATH = 'unsub_data.db'
GROUP_ID = -1002579257687
PRICE_RUB = 399
PRICE_STARS = 200

# –°–æ—Å—Ç–æ—è–Ω–∏—è
FIO, SOURCE, BANK, CARD, EMAIL, PHONE = range(6)

# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
FIO_PATTERN = re.compile(r'^[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+\s[–ê-–Ø–Å][–∞-—è—ë]+$')
CARD_PATTERN = re.compile(r'^\d{6}\*\d{4}$')
EMAIL_PATTERN = re.compile(r'^[^@\s]+@[^@\s]+\.[^@\s]+$')
PHONE_PATTERN = re.compile(r'^\+?\d{10,15}$')

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                fio TEXT, source TEXT, bank TEXT, card TEXT, email TEXT, phone TEXT,
                payment_status TEXT DEFAULT 'pending',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )''')
        await db.commit()

async def save_data(user_id, data):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            '''INSERT OR REPLACE INTO users 
            (telegram_id, fio, source, bank, card, email, phone) 
            VALUES (?, ?, ?, ?, ?, ?, ?)''',
            (user_id, data['fio'], data['source'], data['bank'], 
             data['card'], data['email'], data['phone'])
        )
        await db.commit()

async def update_payment_status(user_id, status):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(
            "UPDATE users SET payment_status = ? WHERE telegram_id = ?",
            (status, user_id)
        )
        await db.commit()

async def ask_deepseek(prompt):
    system_prompt = """
    –¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –≤ –±–æ—Ç–µ –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
    1. –ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ñ–æ—Ä–º—É –æ—Ç–ø–∏—Å–∫–∏
    2. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–≤–æ–¥—ã –¥–∞–Ω–Ω—ã—Ö
    3. –û—Ç–≤–µ—á–∞—Ç—å –¢–û–õ–¨–ö–û –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç–ø–∏—Å–∫–æ–π –æ—Ç —É—Å–ª—É–≥
    
    –ü—Ä–∞–≤–∏–ª–∞:
    - –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    - –ù–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –ø–æ —Ç–µ–º–µ
    - –°–æ–æ–±—â–∏, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ—Ç–ø–∏—Å–∫–µ
    - –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –≤–µ–∂–ª–∏–≤—ã–π —Ç–æ–Ω
    - –ü–æ–ø—Ä–∞–≤–ª—è–π –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    try:
        response = requests.post(
            "https://api.deepseek.com/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
                "Content-Type": "application/json",
            },
            json={
                "model": "deepseek-chat",
                "messages": [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                "temperature": 0.3,  # –£–º–µ–Ω—å—à–∞–µ–º "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
                "max_tokens": 150,   # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
            },
            timeout=10
        )
        response.raise_for_status()
        answer = response.json()["choices"][0]["message"]["content"]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç–µ–º–æ–π
        if "–Ω–µ –ø–æ —Ç–µ–º–µ" in answer.lower() or "–Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è" in answer.lower():
            return "–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —É—Å–ª—É–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫."
        return answer
        
    except Exception as e:
        logger.error(f"DeepSeek API error: {e}")
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã."

async def handle_free_text(update: Update, context: CallbackContext):
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    if context.user_data.get('contact_admin'):
        await context.bot.send_message(GROUP_ID, f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{user_message}")
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        context.user_data['contact_admin'] = False
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    current_state = await context.application.persistence.get_conversation(update.effective_chat.id)
    if current_state in [FIO, SOURCE, BANK, CARD, EMAIL, PHONE]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã.")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    response = await ask_deepseek(user_message)
    await update.message.reply_text(response)

async def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="start_form")],
        [InlineKeyboardButton("üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="contact_admin")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ", callback_data="about_service")]
    ]
    await update.message.reply_text(
        "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n–í—ã –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ <i>–û—Ç–ø–∏—Å–∫–∞ –ë–æ—Ç</i> –¥–ª—è –æ—Ç–º–µ–Ω—ã –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ø–∏—Å–∞–Ω–∏–π.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def handle_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    if query.data == "start_form":
        context.user_data.clear()
        context.user_data['state'] = FIO
        await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):")
        return FIO
    elif query.data == "contact_admin":
        await query.edit_message_text("üì® –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞:")
        context.user_data["contact_admin"] = True
        return ConversationHandler.END
    elif query.data == "about_service":
        await query.edit_message_text(
            "‚ÑπÔ∏è <b>–û —Å–µ—Ä–≤–∏—Å–µ:</b>\n\n–ú—ã –ø–æ–º–æ–≥–∞–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n–°—Ä–æ–∫: 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.\n–°—Ç–æ–∏–º–æ—Å—Ç—å: 399 —Ä—É–±.",
            parse_mode="HTML"
        )
        return ConversationHandler.END
    return ConversationHandler.END

async def process_fio(update: Update, context: CallbackContext):
    text = update.message.text
    if not FIO_PATTERN.match(text):
        response = await ask_deepseek(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª '{text}'. –ü–æ–ø—Ä–æ—Å–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ'.", "–§–ò–û")
        if response:
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ' (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).")
        return FIO
    
    context.user_data["fio"] = text
    context.user_data['state'] = SOURCE
    await update.message.reply_text("üìÉ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë–∏–≥–∑–∞–π–º, Prolads –∏ —Ç.–¥.):")
    return SOURCE

async def process_source(update: Update, context: CallbackContext):
    context.user_data["source"] = update.message.text
    context.user_data['state'] = BANK
    await update.message.reply_text("üè¶ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞, —Å –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –°–±–µ—Ä–±–∞–Ω–∫):")
    return BANK

async def process_bank(update: Update, context: CallbackContext):
    context.user_data["bank"] = update.message.text
    context.user_data['state'] = CARD
    await update.message.reply_text("üí≥ –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–µ 6 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 123456*7890:")
    return CARD

async def process_card(update: Update, context: CallbackContext):
    text = update.message.text
    if not CARD_PATTERN.match(text):
        response = await ask_deepseek(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª '{text}'. –ü–æ–ø—Ä–æ—Å–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Ñ–æ—Ä–º–∞—Ç '123456*7890'.", "–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã")
        if response:
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ '123456*7890' (–ø–µ—Ä–≤—ã–µ 6 –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã).")
        return CARD
    
    context.user_data["card"] = text
    context.user_data['state'] = EMAIL
    await update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ email, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ:")
    return EMAIL

async def process_email(update: Update, context: CallbackContext):
    text = update.message.text
    if not EMAIL_PATTERN.match(text):
        response = await ask_deepseek(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª '{text}'. –ü–æ–ø—Ä–æ—Å–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π email.", "email")
        if response:
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email (–Ω–∞–ø—Ä–∏–º–µ—Ä: example@mail.ru).")
        return EMAIL
    
    context.user_data["email"] = text
    context.user_data['state'] = PHONE
    await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ (10-15 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å +7 –∏–ª–∏ 8):")
    return PHONE

async def process_phone(update: Update, context: CallbackContext):
    text = update.message.text
    if not PHONE_PATTERN.match(text):
        response = await ask_deepseek(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª '{text}'. –ü–æ–ø—Ä–æ—Å–∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ 10-15 —Ü–∏—Ñ—Ä.", "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        if response:
            await update.message.reply_text(response)
        else:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10-15 —Ü–∏—Ñ—Ä, –º–æ–∂–Ω–æ —Å +7 –∏–ª–∏ 8).")
        return PHONE
    
    context.user_data["phone"] = text
    user_id = update.message.from_user.id
    
    await save_data(user_id, context.user_data)
    
    await context.bot.send_message(
        GROUP_ID,
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n"
        f"üë§ {context.user_data['fio']}\n"
        f"üìÑ –°–µ—Ä–≤–∏—Å: {context.user_data['source']}\n"
        f"üè¶ –ë–∞–Ω–∫: {context.user_data['bank']}\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: {context.user_data['card']}\n"
        f"üìß Email: {context.user_data['email']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}",
        parse_mode="HTML"
    )
    
    keyboard = [
        [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_RUB}‚ÇΩ", callback_data=f"pay_rub:{PRICE_RUB}")],
        [InlineKeyboardButton(f"‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å {PRICE_STARS}‚≠ê", callback_data=f"pay_stars:{PRICE_STARS}")]
    ]
    await update.message.reply_text(
        "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!</b>\n\n"
        "üí∞ –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )
    
    context.user_data.clear()
    return ConversationHandler.END


async def handle_free_text(update: Update, context: CallbackContext):
    user_message = update.message.text
    user_id = update.message.from_user.id
    
    if context.user_data.get('contact_admin'):
        await context.bot.send_message(GROUP_ID, f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n{user_message}")
        await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        context.user_data['contact_admin'] = False
        return
    
    try:
        response = await ask_deepseek(user_message)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_payment_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data.startswith("pay_rub:"):
            amount = int(query.data.split(":")[1])
            await send_invoice(context.bot, query.from_user.id, amount, "RUB", "–û—Ç–ø–∏—Å–∫–∞ (—Ä—É–±–ª–∏)")
        elif query.data.startswith("pay_stars:"):
            amount = int(query.data.split(":")[1])
            await send_invoice(context.bot, query.from_user.id, amount, "STAR", "–û—Ç–ø–∏—Å–∫–∞ (–∑–≤—ë–∑–¥—ã)")
    except BadRequest as e:
        logger.error(f"Payment error: {e}")
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await query.edit_message_reply_markup(reply_markup=None)

async def send_invoice(bot, chat_id, amount, currency, title):
    await bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description="–û—Ç–º–µ–Ω–∞ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫",
        payload="unsubscription_service",
        provider_token=PAYMENT_TOKEN,
        currency=currency,
        prices=[LabeledPrice("–£—Å–ª—É–≥–∞", amount * 100)]
    )

async def pre_checkout(update: Update, context: CallbackContext):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    payment = update.message.successful_payment
    
    await update_payment_status(user_id, "completed")
    
    await context.bot.send_message(
        GROUP_ID,
        f"‚úÖ –û–ø–ª–∞—Ç–∞: {update.message.from_user.full_name} (ID {user_id})\n"
        f"–°—É–º–º–∞: {payment.total_amount / 100} {payment.currency}"
    )
    
    await update.message.reply_text(
        "‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ú—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É.\n"
        "–°—Ä–æ–∫: 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è."
    )

async def cancel(update: Update, context: CallbackContext):
    await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω.")
    context.user_data.clear()
    return ConversationHandler.END

async def error_handler(update: Update, context: CallbackContext):
    logger.error(f"Update {update} caused error: {context.error}")
    if update.callback_query:
        await update.callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    elif update.message:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def main():
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        loop.run_until_complete(init_db())
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TOKEN).build()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        loop.run_until_complete(application.bot.delete_webhook(drop_pending_updates=True))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_fio)],
                SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_source)],
                BANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_bank)],
                CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_card)],
                EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_email)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_phone)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(conv_handler)
        application.add_handler(CallbackQueryHandler(handle_buttons, pattern="^(start_form|contact_admin|about_service)$"))
        application.add_handler(CallbackQueryHandler(handle_payment_button, pattern="^pay_(rub|stars):"))
        application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
        application.add_handler(PreCheckoutQueryHandler(pre_checkout))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_free_text))
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
    except Exception as e:
        logger.critical(f"Fatal error: {e}")
    finally:
        loop.close()

if __name__ == "__main__":
    main()
