import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    ConversationHandler,
    CallbackQueryHandler
)
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_TOKEN = os.getenv("PAYMENT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SERVICE, CARD, BANK, EMAIL, PHONE = range(5)

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
with open('brokers_database.json', 'r', encoding='utf-8') as f:
    brokers_db = json.load(f)

# –ü–æ–∏—Å–∫ –±—Ä–æ–∫–µ—Ä–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π)
def find_broker(query):
    results = []
    for broker in brokers_db['brokers']:
        if query.lower() in broker['name'].lower():
            results.append(broker)
    return results

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–∞ –∏–ª–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "–ü—Ä–∏–º–µ—Ä: `–ì–∏–≤–º–∞–Ω–∏`, `–ú–∞–∫—Å –ö—Ä–µ–¥–∏—Ç`",
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_search(update: Update, context: CallbackContext):
    query = update.message.text
    results = find_broker(query)
    
    if not results:
        update.message.reply_text("‚ùå –ë—Ä–æ–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    
    if len(results) == 1:
        send_broker_info(update, results[0])
    else:
        keyboard = [
            [InlineKeyboardButton(broker['name'], callback_data=f"broker_{idx}")]
            for idx, broker in enumerate(results[:10])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        ]
        update.message.reply_text(
            "üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—Ä–æ–∫–µ—Ä–æ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–∫–µ—Ä–µ
def send_broker_info(update: Update, broker):
    message = (
        f"üìå *{broker['name']}*\n\n"
        f"üîó –û—Ç–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –õ–ö: `{broker['unsubscribe_link'] if broker['unsubscribe_link'] != '‚Äì' else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`\n"
        f"üìß Email –¥–ª—è –æ—Ç–∫–∞–∑–∞: `{broker['email'] if broker['email'] != '‚Äì' else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: `{broker['phone'] if broker['phone'] != '‚Äì' else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}`"
    )
    if isinstance(update, Update):
        update.message.reply_text(message, parse_mode='Markdown')
    else:  # –î–ª—è CallbackQueryHandler
        update.callback_query.edit_message_text(message, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    idx = int(query.data.split('_')[1])
    broker = brokers_db['brokers'][idx]
    send_broker_info(update, broker)

async def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞."""
    reply_text = (
        "üîç –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ:\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)\n"
        "2. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã\n"
        "3. –ë–∞–Ω–∫\n"
        "4. Email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –ø–æ–¥–ø–∏—Å–∫–µ\n\n"
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ —Å–µ—Ä–≤–∏—Å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ –∑–Ω–∞—é'"
    )
    
    keyboard = [
        [InlineKeyboardButton("–ù–µ –∑–Ω–∞—é —Å–µ—Ä–≤–∏—Å", callback_data="unknown_service")]
    ]
    
    await update.message.reply_text(
        reply_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SERVICE

async def handle_service(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
    user_input = update.message.text.lower()
    context.user_data['service'] = user_input
    
    if user_input in SERVICES:
        service = SERVICES[user_input]
        await update.message.reply_text(
            f"üîπ {service['name']}\n"
            f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã: {service['cancel_url']}\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: {service['instructions']}\n\n"
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å —á–µ–º-—Ç–æ –µ—â–µ?"
        )
        return ConversationHandler.END
    else:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –∏–¥—É—Ç —Å–ø–∏—Å–∞–Ω–∏—è:"
        )
        return CARD

async def handle_card(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã."""
    card = update.message.text
    if not card.isdigit() or len(card) != 4:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:")
        return CARD
    
    context.user_data['card'] = card
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±–∞–Ω–∫:")
    return BANK

async def handle_bank(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–∞."""
    context.user_data['bank'] = update.message.text
    await update.message.reply_text(
        "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É–∫–∞–∂–∏—Ç–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —Å–µ—Ä–≤–∏—Å—É "
        "(–µ—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):"
    )
    return EMAIL

async def handle_email(update: Update, context: CallbackContext) -> int:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏."""
    contact = update.message.text
    context.user_data['contact'] = contact
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    service = context.user_data.get('service', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å')
    
    reply_text = (
        "üîç –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
        f"–°–µ—Ä–≤–∏—Å: {service}\n"
        f"–ö–∞—Ä—Ç–∞: ****{context.user_data['card']}\n"
        f"–ë–∞–Ω–∫: {context.user_data['bank']}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n\n"
    )
    
    if service == "–Ω–µ –∑–Ω–∞—é" or service not in SERVICES:
        reply_text += (
            "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –†–µ–∫–æ–º–µ–Ω–¥—É—é:\n"
            "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –ø–æ –∫–∞—Ä—Ç–µ –∑–∞ 3 –º–µ—Å—è—Ü–∞ - –æ–±—ã—á–Ω–æ —Ç–∞–º —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å\n"
            "2. –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –±–∞–Ω–∫ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏\n"
            "3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å–ø–æ—Ä–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫\n"
            "4. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ - —Å–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É"
        )
    else:
        reply_text += (
            "‚úÖ –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ.\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–∏—Å–∞."
        )
    
    await update.message.reply_text(reply_text)
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞."""
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –ø—Ä–µ—Ä–≤–∞–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–º–æ—á—å —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ - –Ω–∞–∂–º–∏—Ç–µ /start")
    return ConversationHandler.END

async def handle_unknown_service(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–µ –∑–Ω–∞—é —Å–µ—Ä–≤–∏—Å'."""
    query = update.callback_query
    await query.answer()
    context.user_data['service'] = "–Ω–µ –∑–Ω–∞—é"
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã, —Å –∫–æ—Ç–æ—Ä–æ–π –∏–¥—É—Ç —Å–ø–∏—Å–∞–Ω–∏—è:")
    return CARD

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SERVICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_service),
                CallbackQueryHandler(handle_unknown_service, pattern="^unknown_service$")
            ],
            CARD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_card)],
            BANK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bank)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_email)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
