import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
    CallbackQueryHandler
)
from dotenv import load_dotenv
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TINKOFF_API_KEY = os.getenv("TINKOFF_API_KEY")
TOKEN = os.getenv("BOT_TOKEN")
PAYMENT_TOKEN = os.getenv("PAYMENT_TOKEN")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")

# –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def load_brokers_db():
    try:
        with open('brokers_database.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        logger.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return {"brokers": []}

brokers_db = load_brokers_db()

# –ü–æ–∏—Å–∫ –±—Ä–æ–∫–µ—Ä–æ–≤
def find_brokers(query: str) -> list:
    return [broker for broker in brokers_db["brokers"] 
            if query.lower() in broker["name"].lower()]

async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–æ–∫–µ—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
        "–ü—Ä–∏–º–µ—Ä: '–ì–∏–≤–º–∞–Ω–∏' –∏–ª–∏ '–ú–∞–∫—Å –ö—Ä–µ–¥–∏—Ç'"
    )

async def search_brokers(update: Update, context: CallbackContext) -> None:
    query = update.message.text
    results = find_brokers(query)
    
    if not results:
        await update.message.reply_text("‚ùå –ë—Ä–æ–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    
    if len(results) == 1:
        await show_solution_options(update, results[0])
    else:
        keyboard = [
            [InlineKeyboardButton(broker['name'], callback_data=f"broker_{idx}")]
            for idx, broker in enumerate(results[:10])
        ]
        await update.message.reply_text(
            "üîç –ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—Ä–æ–∫–µ—Ä–æ–≤:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def show_solution_options(update: Update, broker: dict) -> None:
    keyboard = [
        [InlineKeyboardButton("üí∞ –ü–ª–∞—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (149‚ÇΩ)", callback_data=f"paid_{broker['name']}")],
        [InlineKeyboardButton("üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data=f"free_{broker['name']}")]
    ]
    
    await update.message.reply_text(
        f"üìå *{broker['name']}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ—à–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_paid_option(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    broker_name = query.data.split('_', 1)[1]
    broker = next(b for b in brokers_db['brokers'] if b['name'] == broker_name)
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API –¢–∏–Ω—å–∫–æ—Ñ—Ñ
    payment_url = f"https://payment.tinkoff.ru/?apiKey={TINKOFF_API_KEY}&amount=14900"
    
    await query.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è {broker_name}\n\n"
        "–ú—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø–∏—Å–∫–∏:\n"
        "1. –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞—è–≤–ª–µ–Ω–∏—è\n"
        "2. –û—Ç–ø—Ä–∞–≤–∏–º –∑–∞–ø—Ä–æ—Å—ã –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "3. –ü—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: 149‚ÇΩ\n"
        f"[–û–ø–ª–∞—Ç–∏—Ç—å]({payment_url})\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_{broker_name}")]
        ])
    )

async def handle_free_option(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    broker_name = query.data.split('_', 1)[1]
    broker = next(b for b in brokers_db['brokers'] if b['name'] == broker_name)
    
    instructions = (
        f"üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç {broker_name}:\n\n"
        f"1. –û—Ç–ø–∏—Å–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç: {broker['unsubscribe_link'] if broker['unsubscribe_link'] != '‚Äì' else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}\n"
        f"2. –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞ email: {broker['email'] if broker['email'] != '‚Äì' else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}\n"
        f"3. –ü–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {broker['phone'] if broker['phone'] != '‚Äì' else '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}\n\n"
        "–ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç:\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –±–∞–Ω–∫ –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
        "‚Ä¢ –ü–æ–¥–∞–π—Ç–µ –∂–∞–ª–æ–±—É –≤ –†–æ—Å–ø–æ—Ç—Ä–µ–±–Ω–∞–¥–∑–æ—Ä —á–µ—Ä–µ–∑ –ì–æ—Å—É—Å–ª—É–≥–∏"
    )
    
    await query.edit_message_text(
        instructions,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_{broker_name}")]
        ])
    )

async def handle_back_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    
    broker_name = query.data.split('_', 1)[1]
    broker = next(b for b in brokers_db['brokers'] if b['name'] == broker_name)
    await show_solution_options(update, broker)

def main() -> None:
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, search_brokers))
    application.add_handler(CallbackQueryHandler(handle_paid_option, pattern="^paid_"))
    application.add_handler(CallbackQueryHandler(handle_free_option, pattern="^free_"))
    application.add_handler(CallbackQueryHandler(handle_back_button, pattern="^back_"))
    
    application.run_polling()

if __name__ == "__main__":
    main()
